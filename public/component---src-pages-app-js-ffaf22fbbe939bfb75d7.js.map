{"version":3,"sources":["webpack:///./src/client-side-routes/app/CreateScene/index.js","webpack:///./src/client-side-routes/app/Scene/types/ChromaKey/index.js","webpack:///./src/client-side-routes/app/Scene/types/Image/index.js","webpack:///./src/client-side-routes/app/Scene/index.js","webpack:///./src/client-side-routes/app/Scenes/index.js","webpack:///./src/client-side-routes/app/UpdatePassword/index.js","webpack:///./src/client-side-routes/app/Devices/index.js","webpack:///./src/pages/app.js"],"names":["CreateScene","auth","useAuth","JSON","stringify","COLORS","value","label","ChromaKey","id","uid","sceneId","useState","color","showMarkers","settings","setSettings","db","firebase","firestore","handleCheckChange","event","target","name","type","checked","inputType","oldSettings","className","onChange","map","onClick","collection","doc","update","Image","FRAME_TYPES","chromakey","key","image","FrameComponents","Chromakey","Scene","scene","setScene","frames","setFrames","useEffect","isAuthReady","onSnapshot","querySnapshot","data","currentFrames","forEach","push","Object","keys","set","frame","CurrentComponent","src","alt","to","Scenes","sceneName","setSceneName","scenes","setScenes","docs","placeholder","UpdatePassword","currentPassword","password","passwordConfirm","form","setForm","error","setError","success","setSuccess","handleInputChange","field","oldForm","createAccount","a","length","user","currentUser","newPassword","credential","EmailAuthProvider","email","reauthenticateWithCredential","updatePassword","message","classError","classIcon","role","x-data","x-model","fill","viewBox","stroke","stroke-linecap","stroke-linejoin","stroke-width","d","Devices","deviceId","setDeviceId","deviceStatus","setDeviceStatus","activateDevice","docRef","get","owner","ShowEmailNotification","emailSent","setEmailSent","isAuth","navigate","resendEmailVerification","emailVerified","App","Layout","app","basepath","path"],"mappings":"kOAaeA,EAVK,WAChB,IAAMC,EAAOC,cACb,OACI,6BACI,4CACA,6BAAOC,KAAKC,UAAUH,M,gECL5BI,EAAS,CACX,CAAEC,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,OAAQC,MAAO,SA2EbC,EAxEG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QAAc,EACRC,mBAAS,CACrCC,MAAO,QACPC,aAAa,IAFVC,EADiC,KACvBC,EADuB,KAMlCC,EAAKC,IAASC,YAEdC,EAAoB,SAAAC,GAAU,IAAD,EACQA,EAAMC,OAArCC,EADuB,EACvBA,KAAMjB,EADiB,EACjBA,MAAOkB,EADU,EACVA,KAAMC,EADI,EACJA,QACrBC,EAAqB,aAATF,EAAsBC,EAAUnB,EAElDU,GAAY,SAAAW,GAAgB,IAAD,EACvB,wBACOA,IADP,MAEKJ,GAAOG,EAFZ,QAmBR,OACI,yBAAKE,UAAU,mEACX,wBAAIA,UAAU,aAAd,aACA,yBAAKA,UAAU,mCACX,4BACIA,UAAU,yKACVL,KAAK,QACLjB,MAAQS,EAASF,MACjBgB,SAAWT,GAGPf,EAAOyB,KAAI,SAAAjB,GAAK,OAAI,4BAAQP,MAAQO,EAAMP,OAAUO,EAAMN,YAItE,yBAAKqB,UAAU,QACX,2BAAOA,UAAU,0CACb,2BACIA,UAAU,qBACVJ,KAAK,WACLD,KAAK,cACLE,QAAUV,EAASD,YACnBe,SAAWT,IAEf,0BAAMQ,UAAU,WAAhB,2BAKR,4BACIA,UAAU,yHACVJ,KAAK,SACLO,QA5CC,WACKd,EACTe,WAAW,UACXC,IAAIvB,GACJsB,WAAWrB,GACXsB,IAAIxB,GAEHyB,OAAO,CACTnB,eAiCA,UC1DGoB,EAVD,SAAC,GAAyB,EAAvB1B,GAAuB,EAAnBC,IAAmB,EAAdC,QAGtB,OACI,yBAAKiB,UAAU,mEACX,wBAAIA,UAAU,aAAd,WCANQ,EAAc,CAChBC,UAAW,CACPC,IAAK,YACL/B,MAAO,aAEXgC,MAAO,CACHD,IAAK,QACL/B,MAAO,UAITiC,IAAe,MAChBJ,EAAYC,UAAUC,KAAMG,EADZ,EAEhBL,EAAYG,MAAMD,KAAMH,EAFR,GAqFNO,EAhFD,SAAC,GAAiB,IAAf/B,EAAc,EAAdA,QACPV,EAAOC,cADc,EAEDU,mBAAS,IAA5B+B,EAFoB,KAEbC,EAFa,OAGChC,mBAAS,IAA9BiC,EAHoB,KAGZC,EAHY,KAIrB7B,EAAKC,IAASC,YAEpB4B,qBAAU,WACH9C,EAAK+C,cACJ/B,EACKe,WAAW,UACXC,IAAIhC,EAAKS,KACTsB,WAAW,UACXC,IAAItB,GACJsC,YAAW,SAAAC,GACRN,EAAS,OAAD,UACDM,EAAcC,OADb,CAEJ1C,GAAIE,QAIZM,EACCe,WAAW,UACXC,IAAIhC,EAAKS,KACTsB,WAAWrB,GACXsC,YAAW,SAAAC,GACR,IAAME,EAAgB,GACtBF,EAAcG,SAAQ,SAAApB,GAClBmB,EAAcE,KAAd,iBACOrB,EAAIkB,OADX,CAEI1C,GAAIwB,EAAIxB,SAIhBqC,EAAUM,SAGvB,CAACnC,EAAIhB,IAcR,OACI,yBAAK2B,UAAU,aACX,wBAAIA,UAAU,6CAA8Ce,EAAMpB,MAClE,yBAAKK,UAAU,6BACT2B,OAAOC,KAAKpB,GAAaN,KAAI,SAAAQ,GAC3B,OACI,yBACIV,UAAU,6NACVU,IAAMA,EACNP,SArBJP,EAqB0Bc,EArBlB,WACJrB,EACfe,WAAW,UACXC,IAAIhC,EAAKS,KACTsB,WAAWrB,GACXsB,MAEWwB,IAAI,CACZjC,YAeY,kCACA,2BAAKY,EAAYE,GAAK/B,QAxB1B,IAAAiB,MA6BZ,wBAAII,UAAU,cACd,6BAEQiB,EAAOf,KAAI,SAAA4B,GACP,IAAMC,EAAmBnB,EAAgBkB,EAAMlC,MAC/C,OAAO,2BAAG,kBAACmC,EAAD,CAAkBlD,GAAKiD,EAAMjD,GAAKiD,MAAQA,EAAQhD,IAAMT,EAAKS,IAAMC,QAAUA,WC1FzG+B,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACb,OACI,yBAAKf,UAAU,mDACX,yBAAKA,UAAU,SAASgC,IAAI,6CAA6CC,IAAI,iBAC7E,yBAAKjC,UAAU,aACX,yBAAKA,UAAU,0BACX,kBAAC,IAAD,CACIA,UAAU,kBACVkC,GAAE,cAAiBnB,EAAMlC,IAEvBkC,EAAMpB,UAiGjBwC,EAzFA,WACX,IAAM9D,EAAOC,cADI,EAEiBU,mBAAS,IAApCoD,EAFU,KAECC,EAFD,OAGWrD,mBAAS,IAA9BsD,EAHU,KAGFC,EAHE,KAIXlD,EAAKC,IAASC,YAEpB4B,qBAAU,WACH9C,EAAK+C,aACJ/B,EACKe,WAAW,UACXC,IAAIhC,EAAKS,KACTsB,WAAW,UACXiB,YAAW,SAAAC,GACR,IAAMkB,EAAO,GACblB,EAAcG,SAAQ,SAAApB,GAClBmC,EAAKd,KAAL,iBACOrB,EAAIkB,OADX,CAEI1C,GAAIwB,EAAIxB,SAGhB0D,EAAUC,QAGvB,CAACnD,EAAIhB,IAkBR,OACI,yBAAK2B,UAAU,6CACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,wCAAf,sBAGA,0BAAMA,UAAU,QACZ,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,QACX,0BAAMA,UAAU,8BAAhB,QACA,2BACIA,UAAU,gMACVyC,YAAY,mBACZ7C,KAAK,OACLD,KAAK,YACLjB,MAAQ0D,EACRnC,SAnCd,SAAAR,GACtB4C,EAAa5C,EAAMC,OAAOhB,WAqCE,4BACIsB,UAAU,gIACVJ,KAAK,SACLO,QArChB,WACId,EACfe,WAAW,UACXC,IAAIhC,EAAKS,KACTsB,WAAW,UACXC,MAEWwB,IAAI,CACZlC,KAAMyC,MA0Bc,sBAaxB,yBAAKpC,UAAU,iCAAf,cAEI,8BAEJ,yBAAKA,UAAU,0BAEPsC,EAAOpC,KAAI,SAAAa,GAAK,OAAI,kBAAC,EAAD,CAAOL,IAAMK,EAAMlC,GAAKkC,MAAQA,U,yHCpGxE,IAuMe2B,EAvMQ,WACnB,IAAMrE,EAAOC,cADY,EAGDU,mBAAS,CAC7B2D,gBAAiB,GACjBC,SAAU,GACVC,gBAAiB,KAHdC,EAHkB,KAGZC,EAHY,OASC/D,mBAAS,IAA5BgE,EATkB,KASXC,EATW,OAUKjE,oBAAS,GAAhCkE,EAVkB,KAUTC,EAVS,KAYnBC,EAAoB,SAAA3D,GACtB,IAAMf,EAAQe,EAAMC,OAAOhB,MACrB2E,EAAQ5D,EAAMC,OAAOC,KAC3BoD,GAAQ,SAAAO,GAAO,8BACRA,IADQ,MAEVD,GAAQ3E,EAFE,OAIfuE,EAAS,KAGPM,EAAa,e,EAAA,G,EAAA,UAAG,gCAAAC,EAAA,yDAClBP,EAAS,MACNH,EAAKF,SAASa,QAAU,GAAKX,EAAKF,WAAaE,EAAKD,iBAFrC,iCAIJa,EAAOpE,IAASjB,OAAOsF,YACvBC,EAAcd,EAAKF,SACnBiB,EAAavE,IAASjB,KAAKyF,kBAAkBD,WAC/CxF,EAAK0F,MACLjB,EAAKH,iBARC,SAWJe,EAAKM,6BAA6BH,GAX9B,wBAYJH,EAAKO,eAAeL,GAZhB,QAcVT,GAAW,GAdD,kDAgBVF,EAAS,KAAMiB,SAhBL,yD,+KAAH,qDA+BfC,EAAa,GACbC,EAAY,uCAUhB,OATGtB,EAAKF,WAAaE,EAAKD,iBAAmBC,EAAKF,SAASa,QAAU,IACjEU,GAAc,mBACdC,GAAa,kCAEdtB,EAAKF,WAAaE,EAAKD,iBAAmBC,EAAKF,SAASa,OAAS,KAChEU,GAAc,iBACdC,GAAa,6BAIb,yBAAKpE,UAAU,6CACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,WACTkD,GACE,yBAAKlD,UAAU,qFAAqFqE,KAAK,SACrG,uBAAGrE,UAAU,aAAb,oBACA,8EAGLkD,GACC,oCACI,yBAAKlD,UAAU,wCAAf,mBAGA,0BAAMA,UAAU,OAAOsE,SAAO,uCAC1B,yBAAKtE,UAAU,qBACX,yBAAKA,UAAU,QACX,0BAAMA,UAAU,8BAAhB,oBACA,2BACIA,UAAU,gMACVyC,YAAY,GACZ7C,KAAK,WACLD,KAAK,kBACLjB,MAAQoE,EAAKH,gBACb1C,SAAWmD,KAGnB,yBAAKpD,UAAU,QACX,0BAAMA,UAAU,8BAAhB,YACA,2BACIA,UAAU,gMACVyC,YAAY,GACZ7C,KAAK,WACL2E,UAAQ,WACR5E,KAAK,WACLjB,MAAQoE,EAAKF,SACb3C,SAAWmD,KAGnB,yBAAKpD,UAAU,QACX,0BAAMA,UAAU,8BAAhB,oBACA,2BACIA,UAAU,gMACVyC,YAAY,GACZ7C,KAAK,WACL2E,UAAQ,mBACR5E,KAAK,kBACLjB,MAAQoE,EAAKD,gBACb5C,SAAWmD,KAGnB,yBAAKpD,UAAU,oCACX,4BACI,wBAAIA,UAAU,0BACV,yBAAKA,UAAYoE,GACb,yBACIpE,UAAU,UACVwE,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEL5B,EAAKF,WAAaE,EAAKD,iBACrB,0BACI8B,iBAAe,QACfC,kBAAgB,QAChBC,eAAa,IACbC,EAAE,mBAGRhC,EAAKF,WAAaE,EAAKD,iBACrB,0BACI8B,iBAAe,QACfC,kBAAgB,QAChBC,eAAa,IACbC,EAAE,2BAKlB,0BACI9E,UAAYmE,GAEVrB,EAAKF,WAAaE,EAAKD,iBAAmBC,EAAKF,SAASa,QAAU,GAAK,kBACvEX,EAAKF,WAAaE,EAAKD,iBAAmBC,EAAKF,SAASa,OAAS,GAAK,8CACtEX,EAAKF,WAAaE,EAAKD,iBAAmB,2BAGlDG,GACE,wBAAIhD,UAAU,0BACV,yBAAKA,UAAY,8DACb,yBACIA,UAAU,UACVwE,KAAK,OACLC,QAAQ,YACRC,OAAO,gBAEP,0BACIC,iBAAe,QACfC,kBAAgB,QAChBC,eAAa,IACbC,EAAE,2BAId,0BACI9E,UAAYmE,GAEVnB,MAMtB,4BACIhD,UAAU,gIACVJ,KAAK,SACLO,QAAUoD,GAHd,mB,yHCpL5C,IAmGewB,EAnGC,WACZ,IAAM1G,EAAOC,cADK,EAEcU,mBAAS,IAAlCgG,EAFW,KAEDC,EAFC,OAGsBjG,mBAAS,IAA1CkG,EAHW,KAGGC,EAHH,OAIUnG,mBAAS,IAAtBuD,GAJG,WAKZlD,EAAKC,IAASC,YAEpB4B,qBAAU,WACH9C,EAAK+C,aACJ/B,EACKe,WAAW,UACXC,IAAIhC,EAAKS,KACTsB,WAAW,UACXiB,YAAW,SAAAC,GACR,IAAMkB,EAAO,GACblB,EAAcG,SAAQ,SAAApB,GAClBmC,EAAKd,KAAL,iBACOrB,EAAIkB,OADX,CAEI1C,GAAIwB,EAAIxB,SAGhB0D,EAAUC,QAGvB,CAACnD,EAAIhB,IAER,IAIM+G,EAAc,e,EAAA,G,EAAA,UAAG,4BAAA5B,EAAA,6DACb6B,EAAShG,EACVe,WAAW,gBACXC,IAAI2E,GAHU,SAKDK,EAAOC,MALN,cAMI/D,QAGnB4D,EAAgB,SAChBE,EAAO/E,OAAO,CACViF,MAAOlH,EAAKS,OAGhBqG,EAAgB,WAdD,0C,+KAAH,qDAkBpB,OACI,yBAAKnF,UAAU,6CACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,wCAAf,WAGA,0BAAMA,UAAU,QACZ,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,QACX,0BAAMA,UAAU,8BAAhB,aACA,2BACIA,UAAU,gMACVyC,YAAY,wBACZ7C,KAAK,OACLD,KAAK,WACLjB,MAAQsG,EACR/E,SAzCd,SAAAR,GACtBwF,EAAYxF,EAAMC,OAAOhB,WA2CG,4BACIsB,UAAU,gIACVJ,KAAK,SACLO,QAAUiF,GAHd,qBASW,UAAjBF,GACE,yBAAKlF,UAAU,mEAAmEqE,KAAK,SACnF,uBAAGrE,UAAU,aAAb,aACA,wCAAckF,EAAd,MAGW,YAAjBA,GACE,yBAAKlF,UAAU,6DAA6DqE,KAAK,SAC7E,uBAAGrE,UAAU,aAAb,aACA,wCAAckF,EAAd,Y,yHCjFpC,IAAMM,EAAwB,WAC1B,IAAMnH,EAAOC,cADmB,EAEEU,oBAAS,GAApCyG,EAFyB,KAEdC,EAFc,OAGN1G,oBAAS,GAA5BgE,EAHyB,KAGlBC,EAHkB,KAKhC9B,qBAAU,WACH9C,EAAK+C,cAAgB/C,EAAKsH,QACzBC,YAAS,cAEd,CAACvH,IAEJ,IAAMwH,EAAuB,e,EAAA,G,EAAA,UAAG,sBAAArC,EAAA,sEAExBP,GAAS,GAFe,SAGlB5E,EAAKwH,0BAHa,OAIxBH,GAAa,GAJW,gDAMxBA,GAAa,GACbzC,GAAS,GAPe,wD,+KAAH,qDAW7B,OAAI5E,EAAK+C,YAIL/C,EAAKyH,cAuBF,KArBC,yBAAK9F,UAAU,+EAA+EqE,KAAK,SAC/F,uBAAGrE,UAAU,aAAb,iBAAyC3B,EAAK0F,MAA9C,KACA,mEACG0B,GACC,4BACIzF,UAAU,wJACVG,QAAU0F,GAFd,4CAOFJ,GACE,8GAEFzC,GACE,gEApBL,MA8CA+C,UAjBH,WACR,OACI,kBAACC,EAAA,EAAD,CAAQC,KAAG,GACP,kBAAC,EAAD,MACA,yBAAKjG,UAAU,2BACX,kBAAC,SAAD,CAAQkG,SAAS,QACb,kBAAC,EAAD,CAAaC,KAAK,kBAClB,kBAAC,EAAD,CAAOA,KAAK,oBACZ,kBAAC,EAAD,CAAQA,KAAK,MACb,kBAAC,EAAD,CAAgBA,KAAK,qBACrB,kBAAC,EAAD,CAASA,KAAK","file":"component---src-pages-app-js-ffaf22fbbe939bfb75d7.js","sourcesContent":["import React from 'react'\r\nimport { useAuth } from '../../../lib/AuthContext'\r\n\r\nconst CreateScene = () => {\r\n    const auth = useAuth()\r\n    return(\r\n        <div>\r\n            <h1>Create Scene</h1>\r\n            <pre>{ JSON.stringify(auth) }</pre>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateScene\r\n","import React, { useState } from 'react'\r\nimport firebase from '../../../../../lib/firebase'\r\n\r\nconst COLORS = [\r\n    { value: 'red', label: 'Red' },\r\n    { value: 'green', label: 'Green' },\r\n    { value: 'blue', label: 'Blue' }\r\n]\r\n\r\nconst ChromaKey = ({ id, uid, sceneId }) => {\r\n    const [settings, setSettings] = useState({\r\n        color: 'green',\r\n        showMarkers: false\r\n    })\r\n\r\n    const db = firebase.firestore()\r\n\r\n    const handleCheckChange = event => {\r\n        const { name, value, type, checked } = event.target\r\n        const inputType = type === 'checkbox' ? checked : value\r\n\r\n        setSettings(oldSettings => {\r\n            return{\r\n                ...oldSettings,\r\n                [name]: inputType\r\n            }\r\n        })\r\n    }\r\n\r\n    const save = () => {\r\n        const frame = db\r\n            .collection('frames')\r\n            .doc(uid)\r\n            .collection(sceneId)\r\n            .doc(id)\r\n\r\n        frame.update({\r\n            settings\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className='border-solid border-2 border-gray-250 py-8 px-8 mt-2 rounded-lg'>\r\n            <h1 className='font-bold'>ChromaKey</h1>\r\n            <div className='inline-block relative w-64 mt-2'>\r\n                <select\r\n                    className='block appearance-none w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 pr-8 rounded shadow leading-tight focus:outline-none focus:shadow-outline'\r\n                    name='color'\r\n                    value={ settings.color }\r\n                    onChange={ handleCheckChange }\r\n                >\r\n                    {\r\n                        COLORS.map(color => <option value={ color.value }>{ color.label }</option>)\r\n                    }\r\n                </select>\r\n            </div>\r\n            <div className='mt-4'>\r\n                <label className='md:w-2/3 block text-gray-500 font-bold'>\r\n                    <input\r\n                        className='mr-2 leading-tight'\r\n                        type='checkbox'\r\n                        name='showMarkers'\r\n                        checked={ settings.showMarkers }\r\n                        onChange={ handleCheckChange }\r\n                    />\r\n                    <span className='text-sm'>\r\n                        Show tracking markers\r\n                    </span>\r\n                </label>\r\n            </div>\r\n            <button\r\n                className=\"mt-4 text-lg font-semibold bg-gray-800 text-white rounded-lg px-6 py-2 block shadow-xl hover:text-white hover:bg-black\"\r\n                type='button'\r\n                onClick={ save }\r\n            >\r\n                Save\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChromaKey\r\n","import React, { useState } from 'react'\r\n\r\nconst Image = ({ id, uid, sceneId }) => {\r\n    \r\n    \r\n    return(\r\n        <div className='border-solid border-2 border-gray-250 py-8 px-8 mt-2 rounded-lg'>\r\n            <h1 className='font-bold'>Image</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image\r\n","import React, { useState, useEffect } from 'react'\r\nimport firebase from '../../../lib/firebase'\r\nimport { useAuth } from '../../../lib/AuthContext'\r\n\r\nimport Chromakey from './types/ChromaKey'\r\nimport Image from './types/Image'\r\n\r\nconst FRAME_TYPES = {\r\n    chromakey: {\r\n        key: 'chromakey',\r\n        label: 'CHROMAKEY'\r\n    },\r\n    image: {\r\n        key: 'image',\r\n        label: 'IMAGE'\r\n    }\r\n}\r\n\r\nconst FrameComponents = {\r\n    [FRAME_TYPES.chromakey.key]: Chromakey,\r\n    [FRAME_TYPES.image.key]: Image\r\n}\r\n\r\nconst Scene = ({ sceneId }) => {\r\n    const auth = useAuth()\r\n    const [scene, setScene] = useState({})\r\n    const [frames, setFrames] = useState([])\r\n    const db = firebase.firestore()\r\n\r\n    useEffect(() => {\r\n        if(auth.isAuthReady){\r\n            db\r\n                .collection('scenes')\r\n                .doc(auth.uid)\r\n                .collection('scenes')\r\n                .doc(sceneId)\r\n                .onSnapshot(querySnapshot => {\r\n                    setScene({\r\n                        ...querySnapshot.data(),\r\n                        id: sceneId\r\n                    })\r\n                })\r\n\r\n                db\r\n                .collection('frames')\r\n                .doc(auth.uid)\r\n                .collection(sceneId)\r\n                .onSnapshot(querySnapshot => {\r\n                    const currentFrames = []\r\n                    querySnapshot.forEach(doc => {\r\n                        currentFrames.push({\r\n                            ...doc.data(),\r\n                            id: doc.id\r\n                        })\r\n                    })\r\n\r\n                    setFrames(currentFrames)\r\n                })\r\n        }\r\n    }, [db, auth])\r\n\r\n    const createFrame = type => () => {\r\n        const newSceneRef = db\r\n            .collection('frames')\r\n            .doc(auth.uid)\r\n            .collection(sceneId)\r\n            .doc()\r\n        \r\n            newSceneRef.set({\r\n                type\r\n            })\r\n    }\r\n\r\n    return(\r\n        <div className='container'>\r\n            <h1 className='text-center font-semibold text-black mb-4'>{ scene.name }</h1>\r\n            <div className='flex justify-around px-40'>\r\n                { Object.keys(FRAME_TYPES).map(key => {\r\n                    return(\r\n                        <div\r\n                            className='bg-gray-300 w-40 h-40 cursor-pointer tracking-wide text-gray-800 font-bold rounded border-b-4 border-gray-500 hover:border-gray-600 hover:bg-gray-500 hover:text-white shadow-md flex flex-col justify-center items-center'\r\n                            key={ key }\r\n                            onClick={ createFrame(key) }\r\n                        >\r\n                            <p>ADD</p>\r\n                            <p>{ FRAME_TYPES[key].label }</p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <hr className='mt-8 mb-6' />\r\n            <div>\r\n                {\r\n                    frames.map(frame => {\r\n                        const CurrentComponent = FrameComponents[frame.type]\r\n                        return <p><CurrentComponent id={ frame.id } frame={ frame } uid={ auth.uid } sceneId={ sceneId } /></p>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scene\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'gatsby'\r\nimport firebase from '../../../lib/firebase'\r\nimport { useAuth } from '../../../lib/AuthContext'\r\n\r\nconst Scene = ({ scene }) => {\r\n    return(\r\n        <div className='max-w-sm rounded overflow-hidden shadow-lg mt-5'>\r\n            <img className='w-full' src='https://source.unsplash.com/random/384x234' alt='Random Image' />\r\n            <div className='px-6 py-4'>\r\n                <div className='font-bold text-xl mb-2'>\r\n                    <Link\r\n                        className='hover:underline'\r\n                        to={`/app/scene/${ scene.id }`}\r\n                    >\r\n                        { scene.name }\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Scenes = () => {\r\n    const auth = useAuth()\r\n    const [sceneName, setSceneName] = useState('')\r\n    const [scenes, setScenes] = useState([])\r\n    const db = firebase.firestore()\r\n\r\n    useEffect(() => {\r\n        if(auth.isAuthReady){\r\n            db\r\n                .collection('scenes')\r\n                .doc(auth.uid)\r\n                .collection('scenes')\r\n                .onSnapshot(querySnapshot => {\r\n                    const docs = []\r\n                    querySnapshot.forEach(doc => {\r\n                        docs.push({\r\n                            ...doc.data(),\r\n                            id: doc.id\r\n                        })\r\n                    })\r\n                    setScenes(docs)\r\n                })\r\n        }\r\n    }, [db, auth])\r\n\r\n    const handleInputChange = event => {\r\n        setSceneName(event.target.value)\r\n    }\r\n\r\n    const createScene = () => {\r\n        const newSceneRef = db\r\n            .collection('scenes')\r\n            .doc(auth.uid)\r\n            .collection('scenes')\r\n            .doc()\r\n        \r\n            newSceneRef.set({\r\n                name: sceneName\r\n            })\r\n    }\r\n\r\n    return(\r\n        <div className='container max-w-full mx-auto md:py-5 px-6'>\r\n            <div className='max-w-sm mx-auto px-6'>\r\n                <div className='relative flex flex-wrap'>\r\n                    <div className='w-full relative'>\r\n                        <div className='md:mt-0'>\r\n                            <div className='text-center font-semibold text-black'>\r\n                                Create your Scenes\r\n                            </div>\r\n                            <form className='mt-2'>\r\n                                <div className='mx-auto max-w-lg '>\r\n                                    <div className='py-1'>\r\n                                        <span className='px-1 text-sm text-gray-600'>Name</span>\r\n                                        <input\r\n                                            className='text-md block px-3 py-2 rounded-lg w-full bg-white border-2 border-gray-300 placeholder-gray-600 shadow-md focus:placeholder-gray-500 focus:bg-white focus:border-gray-600 focus:outline-none'\r\n                                            placeholder='Create New Scene'\r\n                                            type='text'\r\n                                            name='sceneName'\r\n                                            value={ sceneName }\r\n                                            onChange={ handleInputChange }\r\n                                        />\r\n                                    </div>\r\n                                    <button\r\n                                        className='mt-1 text-lg font-semibold bg-gray-800 w-full text-white rounded-lg px-6 py-3 block shadow-xl hover:text-white hover:bg-black'\r\n                                        type='button'\r\n                                        onClick={ createScene }\r\n                                    >\r\n                                        Create Scene\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='font-semibold text-black mt-5'>\r\n                List Scenes\r\n                <hr />\r\n            </div>\r\n            <div className='grid grid-cols-3 gap-4'>\r\n                {\r\n                    scenes.map(scene => <Scene key={ scene.id } scene={ scene } />)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scenes\r\n","import React, { useState } from 'react'\r\nimport firebase from '../../../lib/firebase'\r\n\r\nimport { useAuth } from '../../../lib/AuthContext'\r\n\r\nconst UpdatePassword = () => {\r\n    const auth = useAuth()\r\n\r\n    const [form, setForm] = useState({\r\n        currentPassword: '',\r\n        password: '',\r\n        passwordConfirm: ''\r\n    })\r\n\r\n    const [error, setError] = useState('')\r\n    const [success, setSuccess] = useState(false)\r\n\r\n    const handleInputChange = event => {\r\n        const value = event.target.value\r\n        const field = event.target.name\r\n        setForm(oldForm => ({\r\n            ...oldForm,\r\n            [field]: value\r\n        }))\r\n        setError('')\r\n    }\r\n\r\n    const createAccount = async () => {\r\n        setError('')\r\n        if(form.password.length >= 6 && form.password === form.passwordConfirm){\r\n            try{\r\n                const user = firebase.auth().currentUser\r\n                const newPassword = form.password\r\n                const credential = firebase.auth.EmailAuthProvider.credential(\r\n                    auth.email,\r\n                    form.currentPassword\r\n                )\r\n\r\n                await user.reauthenticateWithCredential(credential)\r\n                await user.updatePassword(newPassword)\r\n\r\n                setSuccess(true)\r\n            }catch(error){\r\n                setError(error.message)\r\n            }\r\n            \r\n            // firebase\r\n            //     .auth()\r\n            //     .createUserWithEmailAndPassword(form.currentPassword, form.password)\r\n            //     .then(() => {\r\n            //         navigate('/app')\r\n            //     })\r\n            //     .catch(function(error) {\r\n            //         setError(error.message)\r\n            // })\r\n        }\r\n    }\r\n\r\n    let classError = ''\r\n    let classIcon = ' rounded-full p-1 fill-current mr-2 '\r\n    if(form.password === form.passwordConfirm && form.password.length >= 6){\r\n        classError += ' text-green-700 '\r\n        classIcon += ' bg-green-200 text-green-700 '\r\n    }\r\n    if(form.password !== form.passwordConfirm || form.password.length < 6){\r\n        classError += ' text-red-700 '\r\n        classIcon += ' bg-red-200 text-red-700 '\r\n    }\r\n\r\n    return(\r\n        <div className=\"container max-w-full mx-auto md:py-5 px-6\">\r\n            <div className=\"max-w-sm mx-auto px-6\">\r\n                <div className=\"relative flex flex-wrap\">\r\n                    <div className=\"w-full relative\">\r\n                        <div className=\"md:mt-0\">\r\n                            { success && \r\n                                <div className='container mx-auto mt-5 bg-green-100 border-l-4 border-green-500 text-green-700 p-4' role='alert'>\r\n                                    <p className='font-bold'>Password Changed</p>\r\n                                    <p>Your password has been successfylly modified.</p>\r\n                                </div>\r\n                            }\r\n                            { !success &&\r\n                                <>\r\n                                    <div className=\"text-center font-semibold text-black\">\r\n                                        Change Password\r\n                                    </div>\r\n                                    <form className=\"mt-2\" x-data=\"{password: '',password_confirm: ''}\">\r\n                                        <div className=\"mx-auto max-w-lg \">\r\n                                            <div className=\"py-1\">\r\n                                                <span className=\"px-1 text-sm text-gray-600\">Current Password</span>\r\n                                                <input\r\n                                                    className=\"text-md block px-3 py-2 rounded-lg w-full bg-white border-2 border-gray-300 placeholder-gray-600 shadow-md focus:placeholder-gray-500 focus:bg-white focus:border-gray-600 focus:outline-none\"\r\n                                                    placeholder=\"\"\r\n                                                    type=\"password\"\r\n                                                    name='currentPassword'\r\n                                                    value={ form.currentPassword }\r\n                                                    onChange={ handleInputChange }\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"py-1\">\r\n                                                <span className=\"px-1 text-sm text-gray-600\">Password</span>\r\n                                                <input\r\n                                                    className=\"text-md block px-3 py-2 rounded-lg w-full bg-white border-2 border-gray-300 placeholder-gray-600 shadow-md focus:placeholder-gray-500 focus:bg-white focus:border-gray-600 focus:outline-none\"\r\n                                                    placeholder=\"\"\r\n                                                    type=\"password\"\r\n                                                    x-model=\"password\"\r\n                                                    name='password'\r\n                                                    value={ form.password }\r\n                                                    onChange={ handleInputChange }\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"py-1\">\r\n                                                <span className=\"px-1 text-sm text-gray-600\">Password Confirm</span>\r\n                                                <input\r\n                                                    className=\"text-md block px-3 py-2 rounded-lg w-full bg-white border-2 border-gray-300 placeholder-gray-600 shadow-md focus:placeholder-gray-500 focus:bg-white focus:border-gray-600 focus:outline-none\"\r\n                                                    placeholder=\"\"\r\n                                                    type=\"password\"\r\n                                                    x-model=\"password_confirm\"\r\n                                                    name='passwordConfirm'\r\n                                                    value={ form.passwordConfirm }\r\n                                                    onChange={ handleInputChange }\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"flex justify-start mt-3 ml-4 p-1\">\r\n                                                <ul>\r\n                                                    <li className=\"flex items-center py-1\">\r\n                                                        <div className={ classIcon }>\r\n                                                            <svg\r\n                                                                className=\"w-4 h-4\"\r\n                                                                fill=\"none\"\r\n                                                                viewBox=\"0 0 24 24\"\r\n                                                                stroke=\"currentColor\"\r\n                                                            >\r\n                                                                { form.password === form.passwordConfirm &&\r\n                                                                    <path\r\n                                                                        stroke-linecap=\"round\"\r\n                                                                        stroke-linejoin=\"round\"\r\n                                                                        stroke-width=\"2\"\r\n                                                                        d=\"M5 13l4 4L19 7\"\r\n                                                                    />\r\n                                                                }\r\n                                                                { form.password !== form.passwordConfirm &&\r\n                                                                    <path\r\n                                                                        stroke-linecap=\"round\"\r\n                                                                        stroke-linejoin=\"round\"\r\n                                                                        stroke-width=\"2\"\r\n                                                                        d=\"M6 18L18 6M6 6l12 12\"\r\n                                                                    />\r\n                                                                }\r\n                                                            </svg>\r\n                                                        </div>\r\n                                                        <span\r\n                                                            className={ classError }\r\n                                                        >\r\n                                                            { form.password === form.passwordConfirm && form.password.length >= 6 && 'Passwords match' }\r\n                                                            { form.password === form.passwordConfirm && form.password.length < 6 && 'Password must be at least 6 characters long' }\r\n                                                            { form.password !== form.passwordConfirm && 'Passwords do not match' }\r\n                                                        </span>\r\n                                                    </li>\r\n                                                    { error &&\r\n                                                        <li className=\"flex items-center py-1\">\r\n                                                            <div className={ 'rounded-full p-1 fill-current bg-red-200 text-red-700 mr-2' }>\r\n                                                                <svg\r\n                                                                    className=\"w-4 h-4\"\r\n                                                                    fill=\"none\"\r\n                                                                    viewBox=\"0 0 24 24\"\r\n                                                                    stroke=\"currentColor\"\r\n                                                                >\r\n                                                                    <path\r\n                                                                        stroke-linecap=\"round\"\r\n                                                                        stroke-linejoin=\"round\"\r\n                                                                        stroke-width=\"2\"\r\n                                                                        d=\"M6 18L18 6M6 6l12 12\"\r\n                                                                    />\r\n                                                                </svg>\r\n                                                            </div>\r\n                                                            <span\r\n                                                                className={ classError }\r\n                                                            >\r\n                                                                { error }\r\n                                                            </span>\r\n                                                        </li>\r\n                                                    }\r\n                                                </ul>\r\n                                            </div>\r\n                                            <button\r\n                                                className=\"mt-1 text-lg font-semibold bg-gray-800 w-full text-white rounded-lg px-6 py-3 block shadow-xl hover:text-white hover:bg-black\"\r\n                                                type='button'\r\n                                                onClick={ createAccount }\r\n                                            >\r\n                                                Change\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdatePassword\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'gatsby'\r\nimport firebase from '../../../lib/firebase'\r\nimport { useAuth } from '../../../lib/AuthContext'\r\n\r\nconst Devices = () => {\r\n    const auth = useAuth()\r\n    const [deviceId, setDeviceId] = useState('')\r\n    const [deviceStatus, setDeviceStatus] = useState('')\r\n    const [scenes, setScenes] = useState([])\r\n    const db = firebase.firestore()\r\n\r\n    useEffect(() => {\r\n        if(auth.isAuthReady){\r\n            db\r\n                .collection('scenes')\r\n                .doc(auth.uid)\r\n                .collection('scenes')\r\n                .onSnapshot(querySnapshot => {\r\n                    const docs = []\r\n                    querySnapshot.forEach(doc => {\r\n                        docs.push({\r\n                            ...doc.data(),\r\n                            id: doc.id\r\n                        })\r\n                    })\r\n                    setScenes(docs)\r\n                })\r\n        }\r\n    }, [db, auth])\r\n\r\n    const handleInputChange = event => {\r\n        setDeviceId(event.target.value)\r\n    }\r\n\r\n    const activateDevice = async () => {\r\n        const docRef = db\r\n            .collection('temp-devices')\r\n            .doc(deviceId)\r\n\r\n        const doc = await docRef.get()\r\n        const deviceData = doc.data()\r\n        \r\n        if(deviceData){\r\n            setDeviceStatus('Valid')\r\n            docRef.update({\r\n                owner: auth.uid\r\n            })\r\n        }else{\r\n            setDeviceStatus('Invalid')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='container max-w-full mx-auto md:py-5 px-6'>\r\n            <div className='max-w-sm mx-auto px-6'>\r\n                <div className='relative flex flex-wrap'>\r\n                    <div className='w-full relative'>\r\n                        <div className='md:mt-0'>\r\n                            <div className='text-center font-semibold text-black'>\r\n                                Devices\r\n                            </div>\r\n                            <form className='mt-2'>\r\n                                <div className='mx-auto max-w-lg '>\r\n                                    <div className='py-1'>\r\n                                        <span className='px-1 text-sm text-gray-600'>Device ID</span>\r\n                                        <input\r\n                                            className='text-md block px-3 py-2 rounded-lg w-full bg-white border-2 border-gray-300 placeholder-gray-600 shadow-md focus:placeholder-gray-500 focus:bg-white focus:border-gray-600 focus:outline-none'\r\n                                            placeholder='Insert your Device ID'\r\n                                            type='text'\r\n                                            name='deviceId'\r\n                                            value={ deviceId }\r\n                                            onChange={ handleInputChange }\r\n                                        />\r\n                                    </div>\r\n                                    <button\r\n                                        className='mt-1 text-lg font-semibold bg-gray-800 w-full text-white rounded-lg px-6 py-3 block shadow-xl hover:text-white hover:bg-black'\r\n                                        type='button'\r\n                                        onClick={ activateDevice }\r\n                                    >\r\n                                        Activate Device\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                            { deviceStatus === 'Valid' &&\r\n                                <div className='mt-5 bg-green-100 border-l-4 border-green-500 text-green-700 p-4' role='alert'>\r\n                                    <p className='font-bold'>Status ID</p>\r\n                                    <p>Device ID {deviceStatus}.</p>\r\n                                </div>\r\n                            }\r\n                            { deviceStatus === 'Invalid' &&\r\n                                <div className='mt-5 bg-red-100 border-l-4 border-red-500 text-red-700 p-4' role='alert'>\r\n                                    <p className='font-bold'>Status ID</p>\r\n                                    <p>Device ID {deviceStatus}.</p>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Devices\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Router } from '@reach/router'\r\nimport { navigate } from 'gatsby'\r\nimport { useAuth } from '../lib/AuthContext'\r\n\r\nimport Layout from '../components/Layout'\r\nimport CreateScene from '../client-side-routes/app/CreateScene'\r\nimport Scene from '../client-side-routes/app/Scene'\r\nimport Scenes from '../client-side-routes/app/Scenes'\r\nimport UpdatePassword from '../client-side-routes/app/UpdatePassword'\r\nimport Devices from '../client-side-routes/app/Devices'\r\n\r\nconst ShowEmailNotification = () => {\r\n    const auth = useAuth()\r\n    const [emailSent, setEmailSent] = useState(false)\r\n    const [error, setError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if(auth.isAuthReady && !auth.isAuth){\r\n            navigate('/sign-in')\r\n        }\r\n    }, [auth])\r\n\r\n    const resendEmailVerification = async () => {\r\n        try{\r\n            setError(false)\r\n            await auth.resendEmailVerification()\r\n            setEmailSent(true)\r\n        }catch(errr){\r\n            setEmailSent(false)\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    if(!auth.isAuthReady){\r\n        return null\r\n    }\r\n    \r\n    if(!auth.emailVerified){\r\n        return(\r\n            <div className='container mx-auto mt-5 bg-red-100 border-l-4 border-red-500 text-red-700 p-4' role='alert'>\r\n                <p className='font-bold'>Email Failed ({ auth.email })</p>\r\n                <p>Please, confirm your email address.</p>\r\n                { !emailSent &&\r\n                    <button\r\n                        className='bg-transparent hover:bg-orange-500 text-orange-700 font-semibold hover:text-white py-2 px-4 border border-orange-500 hover:border-transparent rounded'\r\n                        onClick={ resendEmailVerification }\r\n                    >\r\n                        Click here to resend email confirmation.\r\n                    </button>\r\n                }\r\n                { emailSent &&\r\n                    <p>Verification e-mail sent. Please, check your inbox and follow the instructions.</p>\r\n                }\r\n                { error &&\r\n                    <p>Error, try again in few minutes.</p>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nconst App = () => {\r\n    return(\r\n        <Layout app>\r\n            <ShowEmailNotification />\r\n            <div className='container mx-auto mt-10'>\r\n                <Router basepath='/app'>\r\n                    <CreateScene path='/create-scene' />\r\n                    <Scene path='/scene/:sceneId' />\r\n                    <Scenes path='/' />\r\n                    <UpdatePassword path='/update-password' />\r\n                    <Devices path='/devices' />\r\n                </Router>\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default App\r\n"],"sourceRoot":""}