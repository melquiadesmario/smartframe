{"version":3,"sources":["webpack:///./src/pages/d.js"],"names":["db","firebase","firestore","D","deviceNumber","localStorage","getItem","owner","randomID","Math","floor","random","toString","padStart","number","alreadyActivated","useState","activated","setActivated","isReady","setIsReady","useEffect","collection","doc","set","lastSeen","FieldValue","serverTimestamp","then","setItem","unsubscribe","onSnapshot","snap","deviceData","data","delete","console","log"],"mappings":"iLAKMA,EAAKC,IAASC,YA6FLC,UA3FL,WACN,IAAMC,EAAeC,aAAaC,QAAQ,gBACpCC,EAAQF,aAAaC,QAAQ,SAC7BE,EAAWC,KAAKC,MAAsB,OAAhBD,KAAKE,UAAmBC,WAAWC,SAAS,EAAG,KACrEC,EAASV,GAAgBI,EACzBO,IAAqBX,KAAkBG,EALlC,EAOuBS,mBAASD,GAApCE,EAPI,KAOOC,EAPP,OAQmBF,oBAAS,GAAhCG,EARI,KAQKC,EARL,KAkFX,OAxEAC,qBAAU,WACFJ,GACAjB,EACCsB,WAAW,gBACXC,IAAIT,GACJU,IAAI,CACDC,SAAUxB,IAASC,UAAUwB,WAAWC,oBAE3CC,MAAK,WACFvB,aAAawB,QAAQ,eAAgBf,GACrCM,GAAW,QAGpB,CAACH,IAEJI,qBAAU,WACN,IAAIS,EAAc,KAgClB,OA9BGX,IAAYF,IACXa,EAAc9B,EACTsB,WAAW,gBACXC,IAAIT,GACJiB,YAAW,SAAAC,GACR,IAAMC,EAAaD,EAAKE,OAErBD,GAAcA,EAAW1B,OACxBP,EACKsB,WAAW,WACXC,IAAIU,EAAW1B,OACfe,WAAW,WACXC,IAAIT,GACJU,IAAI,CAAEP,WAAW,IACjBW,MAAK,WACFvB,aAAawB,QAAQ,QAASI,EAAW1B,OACzCW,GAAa,GAEblB,EACKsB,WAAW,gBACXC,IAAIT,GACJqB,SACAP,MAAK,sBAQ3B,WACAE,GAAaA,OAErB,CAACX,EAASF,IAEbI,qBAAU,WACN,IAAIS,EAAc,KAalB,OAXGb,IACCa,EAAc9B,EACTsB,WAAW,WACXC,IAAIhB,GACJe,WAAW,WACXC,IAAInB,GACJ2B,YAAW,SAAAC,GACRI,QAAQC,IAAI,WAAYL,EAAKE,YAIlC,WACAJ,GAAaA,QAKpB,kBAAC,IAAD,KACI,4DACGb,GAAa,4BAAMH,GACpBG,GAAa","file":"component---src-pages-d-js-7ac79f6608df9bcd693e.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport firebase from '../lib/firebase'\r\n\r\nimport Layout from '../components/Layout'\r\n\r\nconst db = firebase.firestore()\r\n\r\nconst D = () =>{\r\n    const deviceNumber = localStorage.getItem('deviceNumber')\r\n    const owner = localStorage.getItem('owner')\r\n    const randomID = Math.floor(Math.random() * 999999).toString().padStart(6, '0')\r\n    const number = deviceNumber || randomID\r\n    const alreadyActivated = !!deviceNumber && !!owner\r\n\r\n    const [activated, setActivated] = useState(alreadyActivated)\r\n    const [isReady, setIsReady] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if(!activated){\r\n            db\r\n            .collection('temp-devices')\r\n            .doc(number)\r\n            .set({\r\n                lastSeen: firebase.firestore.FieldValue.serverTimestamp()\r\n            })\r\n            .then(() => {\r\n                localStorage.setItem('deviceNumber', number)\r\n                setIsReady(true)\r\n            })\r\n        }\r\n    }, [activated])\r\n\r\n    useEffect(() => {\r\n        let unsubscribe = null\r\n\r\n        if(isReady && !activated){\r\n            unsubscribe = db\r\n                .collection('temp-devices')\r\n                .doc(number)\r\n                .onSnapshot(snap => {\r\n                    const deviceData = snap.data()\r\n\r\n                    if(deviceData && deviceData.owner){\r\n                        db\r\n                            .collection('devices')\r\n                            .doc(deviceData.owner)\r\n                            .collection('devices')\r\n                            .doc(number)\r\n                            .set({ activated: true })\r\n                            .then(() => {\r\n                                localStorage.setItem('owner', deviceData.owner)\r\n                                setActivated(true)\r\n\r\n                                db\r\n                                    .collection('temp-devices')\r\n                                    .doc(number)\r\n                                    .delete()\r\n                                    .then(() => {\r\n                                        \r\n                                    })\r\n                            })\r\n                    }\r\n                })\r\n        }\r\n\r\n        return () => {\r\n            if(unsubscribe) unsubscribe()\r\n        }\r\n    }, [isReady, activated])\r\n\r\n    useEffect(() => {\r\n        let unsubscribe = null\r\n\r\n        if(activated){\r\n            unsubscribe = db\r\n                .collection('devices')\r\n                .doc(owner)\r\n                .collection('devices')\r\n                .doc(deviceNumber)\r\n                .onSnapshot(snap => {\r\n                    console.log('Snapshot', snap.data())\r\n                })\r\n        }\r\n\r\n        return () => {\r\n            if(unsubscribe) unsubscribe()\r\n        }\r\n    })\r\n\r\n    return(\r\n        <Layout>\r\n            <h1>Mostrando Display do tablet</h1>\r\n            { !activated && <h2>{ number }</h2> }\r\n            { activated && <h2>Device Already Activated!</h2>}\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default D\r\n"],"sourceRoot":""}